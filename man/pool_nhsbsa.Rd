% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/connect_nhsbsa.R
\name{pool_nhsbsa}
\alias{pool_nhsbsa}
\title{Pool to NHSBSA DB}
\usage{
pool_nhsbsa(
  dsn = "FBS_8192k",
  driver = "Oracle in OraClient19Home1",
  database,
  username = toupper(Sys.getenv(paste0("DB_", database, "_USERNAME"))),
  password = Sys.getenv(paste0("DB_", database, "_PASSWORD"))
)
}
\arguments{
\item{dsn}{Default is "FBS_8192k" with Fetch Buffer Size of 8192k created for us
by Platform Services on Azure VDs. If, for some reason, this DSN is unavailable
on your VD, set this to NULL in order to use the default "Oracle in OraClient19Home1"
driver with default settings.}

\item{driver}{String, ODBC driver to connect to the DB. Default is correct
but an argument is provided in case this ever changes.}

\item{database}{String, name of the DB - one of c("DALP", "DWCP")).}

\item{username}{String, username for DB. Default value is
\code{Sys.getenv(paste0("DB_", database, "_USERNAME"))} and we recommend setting
this in an \code{.Renviron} file.}

\item{password}{String, username for DB. Default value is
\code{Sys.getenv(paste0("DB_", database, "_PASSWORD"))} and we recommend setting
this in an \code{.Renviron} file.}
}
\value{
Pool to DB. Note: When finished close your connection using
\code{pool::poolClose()}
}
\description{
Pool to NHSBSA DB from the Bastion Host. This is particularly useful in
shiny apps but can be used as a general alternative to \code{con_nhsbsa}.
Hopefully you will already have the ODBC driver installed, but if not you may
have to raise a service request with IT.
}
\examples{
#Initialise pool assuming you have a `.Renviron` file with DB_DALP_USERNAME
#and DB_DALP_PASSWORD set (recommended)

\dontrun{
  pool <- nhsbsaR::pool_nhsbsa(database = "DALP")
}


# Initialise pool without `.Renviron` file (Note: Never store passwords in
# your code)
\dontrun{
  pool <- nhsbsaR::pool_nhsbsa(
    database = "DWCP"
    username = rstudioapi::showPrompt(),
    password = rstudioapi::askForPassword()
  )
}


# Boring DBI methods...
\dontrun{
  DBI::dbGetQuery(conn = pool, statement = "SELECT * FROM dual")
  DBI::dbReadTable(conn = pool, name = "DUAL") # Case sensitive in ODBC
}

# Cool dbplyr methods... (see https://dbplyr.tidyverse.org)
\dontrun{
  dplyr::tbl(src = pool, from = "DUAL") # Case sensitive in ODBC
  dplyr::tbl(src = pool, from = dbplyr::in_schema(schema = "SYS", table = "DUAL") # Case sensitive in ODBC
  dplyr::tbl(src = pool, from = dbplyr::sql("SELECT * FROM dual"))
}


# Remember to disconnect your session
\dontrun{
  pool::poolClose(pool)
}

}
